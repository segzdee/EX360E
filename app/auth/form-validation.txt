// hooks/useFormValidation.ts
import { useState, useCallback } from 'react'
import { ZodSchema, z } from 'zod'
import { toast } from '@/components/ui/use-toast'

interface ValidationOptions<T> {
  schema: ZodSchema;
  initialValues: T;
  onSubmit: (values: T) => Promise<void>;
}

export function useFormValidation<T extends Record<string, any>>({
  schema,
  initialValues,
  onSubmit
}: ValidationOptions<T>) {
  const [formData, setFormData] = useState<T>(initialValues)
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [touched, setTouched] = useState<Set<keyof T>>(new Set())

  // Handle field changes
  const handleChange = useCallback((field: keyof T, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    setTouched(prev => new Set(prev).add(field))
    
    // Validate field if it's been touched
    if (touched.has(field)) {
      validateField(field, value)
    }
  }, [touched])

  // Validate a single field
  const validateField = useCallback((field: keyof T, value: any) => {
    try {
      schema.pick({ [field]: true }).parse({ [field]: value })
      setErrors(prev => ({ ...prev, [field]: undefined }))
      return true
    } catch (error) {
      if (error instanceof z.ZodError) {
        setErrors(prev => ({
          ...prev,
          [field]: error.errors[0]?.message
        }))
        return false
      }
    }
  }, [schema])

  // Validate all fields
  const validateForm = useCallback(async () => {
    try {
      await schema.parseAsync(formData)
      setErrors({})
      return true
    } catch (error) {
      if (error instanceof z.ZodError) {
        const newErrors: Partial<Record<keyof T, string>> = {}
        error.errors.forEach(err => {
          const path = err.path[0] as keyof T
          newErrors[path] = err.message
        })
        setErrors(newErrors)
      }
      return false
    }
  }, [formData, schema])

  // Handle form submission
  const handleSubmit = useCallback(async (e?: React.FormEvent) => {
    if (e) {
      e.preventDefault()
    }
    
    setIsSubmitting(true)
    try {
      const isValid = await validateForm()
      if (isValid) {
        await onSubmit(formData)
      }
    } catch (error) {
      toast({
        title: "Error",
        description: error.message || "An error occurred",
        variant: "destructive"
      })
    } finally {
      setIsSubmitting(false)
    }
  }, [formData, validateForm, onSubmit])

  // Reset form to initial values
  const resetForm = useCallback(() => {
    setFormData(initialValues)
    setErrors({})
    setTouched(new Set())
  }, [initialValues])

  // Mark all fields as touched
  const touchAll = useCallback(() => {
    setTouched(new Set(Object.keys(formData) as Array<keyof T>))
  }, [formData])

  return {
    formData,
    errors,
    touched,
    isSubmitting,
    handleChange,
    handleSubmit,
    validateField,
    validateForm,
    resetForm,
    touchAll,
    setFormData
  }
}