// app/auth/register/staff/page.tsx
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { CategorySelect } from '@/components/categories/CategorySelect'
import { toast } from '@/components/ui/use-toast'

export default function StaffRegistration() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    phone: '',
    staffCategoryId: '',
    preferredPositions: [] as string[],
    skills: '',
    experience: '',
    hourlyRate: '',
    availability: '',
    hasWorkVisa: false,
    hasCertifications: false,
    certifications: '',
    preferredLocations: '',
    bio: ''
  })
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()
  const supabase = createClientComponentClient()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      // Create auth user
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          data: {
            role: 'freelancer',
            full_name: `${formData.firstName} ${formData.lastName}`
          }
        }
      })

      if (authError) throw authError

      // Create staff profile
      const { error: profileError } = await supabase
        .from('freelancers')
        .insert({
          profile_id: authData.user!.id,
          staff_category_id: formData.staffCategoryId,
          preferred_positions: formData.preferredPositions,
          skills: formData.skills.split(',').map(skill => skill.trim()),
          experience_years: parseFloat(formData.experience),
          hourly_rate_range: {
            min: parseFloat(formData.hourlyRate),
            max: parseFloat(formData.hourlyRate) * 1.5 // Default max rate
          },
          certifications: formData.hasCertifications ? 
            formData.certifications.split(',').map(cert => ({ name: cert.trim() })) : [],
          preferred_locations: formData.preferredLocations.split(',').map(loc => loc.trim()),
          bio: formData.bio,
          phone: formData.phone,
          has_work_visa: formData.hasWorkVisa,
          availability_type: formData.availability,
          verification_status: 'pending'
        })

      if (profileError) throw profileError

      toast({
        title: "Registration successful",
        description: "Please check your email to verify your account.",
      })

      router.push('/auth/verify')
    } catch (error) {
      console.error('Registration error:', error)
      toast({
        title: "Registration failed",
        description: "An error occurred during registration. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Staff Registration
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Join our platform to find hospitality work opportunities
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <Card className="py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  First Name
                </label>
                <div className="mt-1">
                  <Input
                    value={formData.firstName}
                    onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                    required
                    className="appearance-none block w-full"
                    placeholder="First name"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Last Name
                </label>
                <div className="mt-1">
                  <Input
                    value={formData.lastName}
                    onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                    required
                    className="appearance-none block w-full"
                    placeholder="Last name"
                  />
                </div>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Staff Category
              </label>
              <div className="mt-1">
                <CategorySelect
                  type="staff"
                  value={formData.staffCategoryId}
                  onChange={(value) => setFormData({ ...formData, staffCategoryId: value })}
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Email Address
<div className="mt-1">
                  <Input
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    required
                    className="appearance-none block w-full"
                    placeholder="Enter your email"
                  />
                </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <div className="mt-1">
                <Input
                  type="password"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                  required
                  className="appearance-none block w-full"
                  placeholder="Enter your password"
                  minLength={8}
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Phone Number
              </label>
              <div className="mt-1">
                <Input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  required
                  className="appearance-none block w-full"
                  placeholder="Enter phone number"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Skills (comma-separated)
              </label>
              <div className="mt-1">
                <Input
                  value={formData.skills}
                  onChange={(e) => setFormData({ ...formData, skills: e.target.value })}
                  required
                  className="appearance-none block w-full"
                  placeholder="Enter your skills (e.g., Bartending, Food Service, Customer Service)"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Years of Experience
              </label>
              <div className="mt-1">
                <Input
                  type="number"
                  value={formData.experience}
                  onChange={(e) => setFormData({ ...formData, experience: e.target.value })}
                  required
                  min="0"
                  step="0.5"
                  className="appearance-none block w-full"
                  placeholder="Years of experience"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Preferred Hourly Rate ($)
              </label>
              <div className="mt-1">
                <Input
                  type="number"
                  value={formData.hourlyRate}
                  onChange={(e) => setFormData({ ...formData, hourlyRate: e.target.value })}
                  required
                  min="0"
                  step="0.5"
                  className="appearance-none block w-full"
                  placeholder="Enter your preferred hourly rate"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Availability
              </label>
              <div className="mt-1">
                <select
                  value={formData.availability}
                  onChange={(e) => setFormData({ ...formData, availability: e.target.value })}
                  required
                  className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                >
                  <option value="">Select availability</option>
                  <option value="full_time">Full Time</option>
                  <option value="part_time">Part Time</option>
                  <option value="weekends">Weekends Only</option>
                  <option value="evenings">Evenings Only</option>
                  <option value="on_call">On Call</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Preferred Locations (comma-separated)
              </label>
              <div className="mt-1">
                <Input
                  value={formData.preferredLocations}
                  onChange={(e) => setFormData({ ...formData, preferredLocations: e.target.value })}
                  required
                  className="appearance-none block w-full"
                  placeholder="Enter preferred work locations"
                />
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="work-visa"
                  checked={formData.hasWorkVisa}
                  onCheckedChange={(checked) => 
                    setFormData({ ...formData, hasWorkVisa: checked as boolean })
                  }
                />
                <label
                  htmlFor="work-visa"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  I have a valid work visa/permit
                </label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="certifications"
                  checked={formData.hasCertifications}
                  onCheckedChange={(checked) => 
                    setFormData({ ...formData, hasCertifications: checked as boolean })
                  }
                />
                <label
                  htmlFor="certifications"
                  className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                  I have relevant certifications
                </label>
              </div>
            </div>

            {formData.hasCertifications && (
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Certifications (comma-separated)
                </label>
                <div className="mt-1">
                  <Input
                    value={formData.certifications}
                    onChange={(e) => setFormData({ ...formData, certifications: e.target.value })}
                    className="appearance-none block w-full"
                    placeholder="List your certifications"
                  />
                </div>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Bio
              </label>
              <div className="mt-1">
                <Textarea
                  value={formData.bio}
                  onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                  className="appearance-none block w-full"
                  placeholder="Tell us about yourself and your experience"
                  rows={4}
                />
              </div>
            </div>

            <div>
              <Button
                type="submit"
                disabled={isLoading}
                className="w-full flex justify-center py-2 px-4"
              >
                {isLoading ? 'Registering...' : 'Register as Staff'}
              </Button>
            </div>
          </form>
        </Card>
      </div>
    </div>
  )
}