// components/dashboard/company/ActiveShifts.tsx
'use client'

import { useState, useEffect } from 'react'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { format } from 'date-fns'

export function ActiveShifts() {
  const [shifts, setShifts] = useState([])
  const supabase = createClientComponentClient()

  useEffect(() => {
    fetchActiveShifts()
  }, [])

  const fetchActiveShifts = async () => {
    const { data } = await supabase
      .from('shifts')
      .select(`
        *,
        shift_assignments(
          id,
          status,
          freelancer:freelancers(
            id,
            profiles(full_name)
          )
        )
      `)
      .eq('status', 'active')
      .order('start_time', { ascending: true })

    setShifts(data || [])
  }

  return (
    <Card className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold">Active Shifts</h2>
        <Button variant="outline" onClick={fetchActiveShifts}>Refresh</Button>
      </div>

      <div className="space-y-4">
        {shifts.map((shift: any) => (
          <div key={shift.id} className="bg-white rounded-lg border p-4">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold text-lg">{shift.title}</h3>
                <p className="text-sm text-gray-500 mt-1">
                  {format(new Date(shift.start_time), 'PPp')} - 
                  {format(new Date(shift.end_time), 'p')}
                </p>
                {shift.shift_assignments[0]?.freelancer && (
                  <p className="text-sm mt-2">
                    Staff: {shift.shift_assignments[0].freelancer.profiles.full_name}
                  </p>
                )}
              </div>
              <div className="text-right">
                <Badge>{shift.status}</Badge>
                <p className="text-sm mt-2">${shift.hourly_rate}/hr</p>
              </div>
            </div>
          </div>
        ))}
        {shifts.length === 0 && (
          <p className="text-center text-gray-500">No active shifts</p>
        )}
      </div>
    </Card>
  )
}

// components/dashboard/company/StaffApplications.tsx
export function StaffApplications() {
  const [applications, setApplications] = useState([])
  const supabase = createClientComponentClient()

  useEffect(() => {
    fetchApplications()
  }, [])

  const fetchApplications = async () => {
    const { data } = await supabase
      .from('shift_applications')
      .select(`
        *,
        shift:shifts(*),
        freelancer:freelancers(
          id,
          profiles(full_name),
          skills,
          certifications,
          average_rating,
          total_shifts_completed
        )
      `)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })

    setApplications(data || [])
  }

  const handleApplication = async (applicationId: string, status: 'approved' | 'rejected') => {
    try {
      const { error } = await supabase
        .from('shift_applications')
        .update({ status })
        .eq('id', applicationId)

      if (error) throw error

      // If approved, create shift assignment
      if (status === 'approved') {
        const application = applications.find(a => a.id === applicationId)
        await supabase
          .from('shift_assignments')
          .insert({
            shift_id: application.shift.id,
            freelancer_id: application.freelancer.id,
            status: 'assigned'
          })
      }

      fetchApplications()
    } catch (error) {
      console.error('Error handling application:', error)
    }
  }

  return (
    <Card className="p-6">
      <h2 className="text-xl font-bold mb-6">Pending Applications</h2>
      <div className="space-y-6">
        {applications.map((application: any) => (
          <div key={application.id} className="bg-white rounded-lg border p-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h3 className="font-semibold">{application.shift.title}</h3>
                <p className="text-sm text-gray-500">
                  {format(new Date(application.shift.start_time), 'PPp')}
                </p>
                <p className="text-sm text-gray-500">
                  ${application.shift.hourly_rate}/hr
                </p>
              </div>
              <div className="text-right">
                <h4 className="font-medium">
                  {application.freelancer.profiles.full_name}
                </h4>
                <p className="text-sm text-gray-500">
                  Rating: {application.freelancer.average_rating?.toFixed(1)} / 5.0
                </p>
                <p className="text-sm text-gray-500">
                  Completed Shifts: {application.freelancer.total_shifts_completed}
                </p>
              </div>
            </div>
            <div className="flex gap-2 mt-4">
              <Button
                variant="default"
                onClick={() => handleApplication(application.id, 'approved')}
              >
                Approve
              </Button>
              <Button
                variant="outline"
                onClick={() => handleApplication(application.id, 'rejected')}
              >
                Decline
              </Button>
            </div>
          </div>
        ))}
        {applications.length === 0 && (
          <p className="text-center text-gray-500">No pending applications</p>
        )}
      </div>
    </Card>
  )
}

// components/dashboard/company/ShiftCreator.tsx
import { zodResolver } from '@hookform/resolve-form'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

const shiftSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().optional(),
  start_time: z.string().min(1, 'Start time is required'),
  end_time: z.string().min(1, 'End time is required'),
  hourly_rate: z.number().min(1, 'Hourly rate is required'),
  required_skills: z.array(z.string()).min(1, 'At least one skill is required'),
  location: z.string().min(1, 'Location is required'),
})

export function ShiftCreator() {
  const form = useForm({
    resolver: zodResolver(shiftSchema),
    defaultValues: {
      title: '',
      description: '',
      start_time: '',
      end_time: '',
      hourly_rate: 0,
      required_skills: [],
      location: '',
    }
  })

  const onSubmit = async (data) => {
    const supabase = createClientComponentClient()
    try {
      const { error } = await supabase
        .from('shifts')
        .insert([{
          ...data,
          status: 'open',
        }])

      if (error) throw error

      form.reset()
    } catch (error) {
      console.error('Error creating shift:', error)
    }
  }

  return (
    <Card className="p-6">
      <h2 className="text-xl font-bold mb-6">Create New Shift</h2>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        {/* Form fields */}
      </form>
    </Card>
  )
}
