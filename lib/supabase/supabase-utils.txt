// utils/supabase.ts
import { createBrowserClient } from '@supabase/ssr'

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

// utils/auth.ts
import { createClient } from '@/utils/supabase'

export async function getUserProfile() {
  const supabase = createClient()
  const { data: { session } } = await supabase.auth.getSession()
  
  if (!session) return null
  
  const { data } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', session.user.id)
    .single()
    
  return data
}

// utils/geo.ts
export function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number) {
  const R = 6371 // Radius of the earth in km
  const dLat = deg2rad(lat2 - lat1)
  const dLon = deg2rad(lon2 - lon1)
  const a =
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
    Math.sin(dLon/2) * Math.sin(dLon/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  const d = R * c // Distance in km
  return d
}

function deg2rad(deg: number) {
  return deg * (Math.PI/180)
}

// utils/payments.ts
export function calculateFees(amount: number, userType: 'company' | 'recruiter' | 'freelancer') {
  const fees = {
    company: 0.08, // 8%
    recruiter: 0.06, // 6%
    freelancer: 0.10 // 10%
  }

  const feePercentage = fees[userType]
  const feeAmount = amount * feePercentage
  const totalAmount = userType === 'company' ? amount + feeAmount : amount - feeAmount

  return {
    originalAmount: amount,
    feePercentage,
    feeAmount,
    totalAmount
  }
}

// utils/validation.ts
export function validateShiftDuration(startTime: Date, endTime: Date) {
  const durationHours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)
  return durationHours >= 4 && durationHours <= 11.5
}

export function validatePayRate(rate: number) {
  return rate > 0 && Number.isFinite(rate)
}

// utils/notifications.ts
type NotificationType = 'shift' | 'payment' | 'message' | 'system'

export async function sendNotification(
  userId: string,
  type: NotificationType,
  title: string,
  content: string,
  actionUrl?: string
) {
  const supabase = createClient()
  
  return await supabase
    .from('notifications')
    .insert({
      user_id: userId,
      type,
      title,
      content,
      action_url: actionUrl
    })
}

// utils/formatting.ts
export function formatCurrency(amount: number) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount)
}

export function formatDateTime(date: string | Date) {
  return new Intl.DateTimeFormat('en-US', {
    dateStyle: 'medium',
    timeStyle: 'short'
  }).format(new Date(date))
}

// utils/storage.ts
import { v4 as uuidv4 } from 'uuid'

export async function uploadFile(file: File, bucket: string) {
  const supabase = createClient()
  const fileExt = file.name.split('.').pop()
  const fileName = `${uuidv4()}.${fileExt}`
  const filePath = `${bucket}/${fileName}`

  const { error } = await supabase.storage
    .from(bucket)
    .upload(filePath, file)

  if (error) throw error

  const { data: { publicUrl } } = supabase.storage
    .from(bucket)
    .getPublicUrl(filePath)

  return publicUrl
}